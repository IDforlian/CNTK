=== Running /cygdrive/c/src/cntk_github/x64/release/cntk.exe configFile=C:\src\cntk_github\Tests\EndToEndTests\CNTKTextFormatReader\Examples\Image\MNIST\Config/02_Convolution.cntk currentDirectory=E:\cygwin64\tmp\cntk-test-20160426172357.371686\CNTKTextFormatReader\Examples\Image\MNIST_02_Convolution@release_gpu\TestData RunDir=E:\cygwin64\tmp\cntk-test-20160426172357.371686\CNTKTextFormatReader\Examples\Image\MNIST_02_Convolution@release_gpu DataDir=E:\cygwin64\tmp\cntk-test-20160426172357.371686\CNTKTextFormatReader\Examples\Image\MNIST_02_Convolution@release_gpu\TestData ConfigDir=C:\src\cntk_github\Tests\EndToEndTests\CNTKTextFormatReader\Examples\Image\MNIST\Config OutputDir=E:\cygwin64\tmp\cntk-test-20160426172357.371686\CNTKTextFormatReader\Examples\Image\MNIST_02_Convolution@release_gpu DeviceId=0 timestamping=true train=[SGD=[maxEpochs=3]] imageLayout="cudnn"
-------------------------------------------------------------------
Build info: 

		Built time: Apr 26 2016 14:22:06
		Last modified date: Thu Apr  7 11:05:47 2016
		Build type: Release
		Build target: GPU
		With 1bit-SGD: no
		CUDA_PATH: C:\Program Files\NVIDIA GPU Computing Toolkit\CUDA\v7.0
		CUB_PATH: E:\lib\cub-1.4.1
		CUDNN_PATH: E:\lib\cuDNN_v4
		Build Branch: alrezni/examples_text
		Build SHA1: bacd6681dae457fcc823f84c2e635d69134b1219
		Built by alrezni on DIFFENG
		Build Path: c:\src\cntk_github\Source\CNTK\
-------------------------------------------------------------------
Changed current directory to E:\cygwin64\tmp\cntk-test-20160426172357.371686\CNTKTextFormatReader\Examples\Image\MNIST_02_Convolution@release_gpu\TestData
04/26/2016 16:23:58: -------------------------------------------------------------------
04/26/2016 16:23:58: Build info: 

04/26/2016 16:23:58: 		Built time: Apr 26 2016 14:22:06
04/26/2016 16:23:58: 		Last modified date: Thu Apr  7 11:05:47 2016
04/26/2016 16:23:58: 		Build type: Release
04/26/2016 16:23:58: 		Build target: GPU
04/26/2016 16:23:58: 		With 1bit-SGD: no
04/26/2016 16:23:58: 		CUDA_PATH: C:\Program Files\NVIDIA GPU Computing Toolkit\CUDA\v7.0
04/26/2016 16:23:58: 		CUB_PATH: E:\lib\cub-1.4.1
04/26/2016 16:23:58: 		CUDNN_PATH: E:\lib\cuDNN_v4
04/26/2016 16:23:58: 		Build Branch: alrezni/examples_text
04/26/2016 16:23:58: 		Build SHA1: bacd6681dae457fcc823f84c2e635d69134b1219
04/26/2016 16:23:58: 		Built by alrezni on DIFFENG
04/26/2016 16:23:58: 		Build Path: c:\src\cntk_github\Source\CNTK\
04/26/2016 16:23:58: -------------------------------------------------------------------

04/26/2016 16:23:58: Running on DIFFENG at 2016/04/26 16:23:58
04/26/2016 16:23:58: Command line: 
C:\src\cntk_github\x64\release\cntk.exe  configFile=C:\src\cntk_github\Tests\EndToEndTests\CNTKTextFormatReader\Examples\Image\MNIST\Config/02_Convolution.cntk  currentDirectory=E:\cygwin64\tmp\cntk-test-20160426172357.371686\CNTKTextFormatReader\Examples\Image\MNIST_02_Convolution@release_gpu\TestData  RunDir=E:\cygwin64\tmp\cntk-test-20160426172357.371686\CNTKTextFormatReader\Examples\Image\MNIST_02_Convolution@release_gpu  DataDir=E:\cygwin64\tmp\cntk-test-20160426172357.371686\CNTKTextFormatReader\Examples\Image\MNIST_02_Convolution@release_gpu\TestData  ConfigDir=C:\src\cntk_github\Tests\EndToEndTests\CNTKTextFormatReader\Examples\Image\MNIST\Config  OutputDir=E:\cygwin64\tmp\cntk-test-20160426172357.371686\CNTKTextFormatReader\Examples\Image\MNIST_02_Convolution@release_gpu  DeviceId=0  timestamping=true  train=[SGD=[maxEpochs=3]]  imageLayout="cudnn"



04/26/2016 16:23:58: >>>>>>>>>>>>>>>>>>>> RAW CONFIG (VARIABLES NOT RESOLVED) >>>>>>>>>>>>>>>>>>>>
04/26/2016 16:23:58: RootDir = ".."
ConfigDir = "$RootDir$/Config"
DataDir   = "$RootDir$/Data"
OutputDir = "$RootDir$/Output"
ModelDir  = "$OutputDir$/Models"
deviceId = 0
imageLayout = "cudnn"
command = train:test
precision = "float"
modelPath = "$ModelDir$/02_Convolution"
ndlMacros = "$ConfigDir$/Macros.ndl"
traceLevel=1
numMBsToShowResult=500
prefetch=true
initOnCPUOnly=true
train = [
    action = "train"
    NDLNetworkBuilder = [
        networkDescription = "$ConfigDir$/02_Convolution.ndl"
    ]
    SGD = [
        epochSize = 60000
        minibatchSize = 32
        learningRatesPerMB = 0.1*5:0.3
        momentumPerMB = 0*10:0.7
        maxEpochs = 15
    ]
    reader = [
        readerType = "CNTKTextFormatReader"
        file = "$DataDir$/Train-28x28_cntk_text.txt"
        input = [
            features = [
                dim = 784
                format = "dense"
            ]
            labels = [
                dim = 10
                format = "dense"
            ]
        ]
    ]
]
test = [
    action = test
    minibatchSize = 16
    NDLNetworkBuilder = [
        networkDescription = "$ConfigDir$/02_Convolution.ndl"
    ]
    reader = [
        readerType = "CNTKTextFormatReader"
        file = "$DataDir$/Test-28x28_cntk_text.txt"
        input = [
            features = [
                dim = 784
                format = "dense"
            ]
            labels = [
                dim = 10
                format = "dense"
            ]
        ]
    ]
]
currentDirectory=E:\cygwin64\tmp\cntk-test-20160426172357.371686\CNTKTextFormatReader\Examples\Image\MNIST_02_Convolution@release_gpu\TestData
RunDir=E:\cygwin64\tmp\cntk-test-20160426172357.371686\CNTKTextFormatReader\Examples\Image\MNIST_02_Convolution@release_gpu
DataDir=E:\cygwin64\tmp\cntk-test-20160426172357.371686\CNTKTextFormatReader\Examples\Image\MNIST_02_Convolution@release_gpu\TestData
ConfigDir=C:\src\cntk_github\Tests\EndToEndTests\CNTKTextFormatReader\Examples\Image\MNIST\Config
OutputDir=E:\cygwin64\tmp\cntk-test-20160426172357.371686\CNTKTextFormatReader\Examples\Image\MNIST_02_Convolution@release_gpu
DeviceId=0
timestamping=true
train=[SGD=[maxEpochs=3]]
imageLayout="cudnn"

04/26/2016 16:23:58: <<<<<<<<<<<<<<<<<<<< RAW CONFIG (VARIABLES NOT RESOLVED)  <<<<<<<<<<<<<<<<<<<<

04/26/2016 16:23:58: >>>>>>>>>>>>>>>>>>>> RAW CONFIG WITH ALL VARIABLES RESOLVED >>>>>>>>>>>>>>>>>>>>
04/26/2016 16:23:58: RootDir = ".."
ConfigDir = "../Config"
DataDir   = "../Data"
OutputDir = "../Output"
ModelDir  = "E:\cygwin64\tmp\cntk-test-20160426172357.371686\CNTKTextFormatReader\Examples\Image\MNIST_02_Convolution@release_gpu/Models"
deviceId = 0
imageLayout = "cudnn"
command = train:test
precision = "float"
modelPath = "E:\cygwin64\tmp\cntk-test-20160426172357.371686\CNTKTextFormatReader\Examples\Image\MNIST_02_Convolution@release_gpu/Models/02_Convolution"
ndlMacros = "C:\src\cntk_github\Tests\EndToEndTests\CNTKTextFormatReader\Examples\Image\MNIST\Config/Macros.ndl"
traceLevel=1
numMBsToShowResult=500
prefetch=true
initOnCPUOnly=true
train = [
    action = "train"
    NDLNetworkBuilder = [
        networkDescription = "C:\src\cntk_github\Tests\EndToEndTests\CNTKTextFormatReader\Examples\Image\MNIST\Config/02_Convolution.ndl"
    ]
    SGD = [
        epochSize = 60000
        minibatchSize = 32
        learningRatesPerMB = 0.1*5:0.3
        momentumPerMB = 0*10:0.7
        maxEpochs = 15
    ]
    reader = [
        readerType = "CNTKTextFormatReader"
        file = "E:\cygwin64\tmp\cntk-test-20160426172357.371686\CNTKTextFormatReader\Examples\Image\MNIST_02_Convolution@release_gpu\TestData/Train-28x28_cntk_text.txt"
        input = [
            features = [
                dim = 784
                format = "dense"
            ]
            labels = [
                dim = 10
                format = "dense"
            ]
        ]
    ]
]
test = [
    action = test
    minibatchSize = 16
    NDLNetworkBuilder = [
        networkDescription = "C:\src\cntk_github\Tests\EndToEndTests\CNTKTextFormatReader\Examples\Image\MNIST\Config/02_Convolution.ndl"
    ]
    reader = [
        readerType = "CNTKTextFormatReader"
        file = "E:\cygwin64\tmp\cntk-test-20160426172357.371686\CNTKTextFormatReader\Examples\Image\MNIST_02_Convolution@release_gpu\TestData/Test-28x28_cntk_text.txt"
        input = [
            features = [
                dim = 784
                format = "dense"
            ]
            labels = [
                dim = 10
                format = "dense"
            ]
        ]
    ]
]
currentDirectory=E:\cygwin64\tmp\cntk-test-20160426172357.371686\CNTKTextFormatReader\Examples\Image\MNIST_02_Convolution@release_gpu\TestData
RunDir=E:\cygwin64\tmp\cntk-test-20160426172357.371686\CNTKTextFormatReader\Examples\Image\MNIST_02_Convolution@release_gpu
DataDir=E:\cygwin64\tmp\cntk-test-20160426172357.371686\CNTKTextFormatReader\Examples\Image\MNIST_02_Convolution@release_gpu\TestData
ConfigDir=C:\src\cntk_github\Tests\EndToEndTests\CNTKTextFormatReader\Examples\Image\MNIST\Config
OutputDir=E:\cygwin64\tmp\cntk-test-20160426172357.371686\CNTKTextFormatReader\Examples\Image\MNIST_02_Convolution@release_gpu
DeviceId=0
timestamping=true
train=[SGD=[maxEpochs=3]]
imageLayout="cudnn"

04/26/2016 16:23:58: <<<<<<<<<<<<<<<<<<<< RAW CONFIG WITH ALL VARIABLES RESOLVED <<<<<<<<<<<<<<<<<<<<

04/26/2016 16:23:58: >>>>>>>>>>>>>>>>>>>> PROCESSED CONFIG WITH ALL VARIABLES RESOLVED >>>>>>>>>>>>>>>>>>>>
configparameters: 02_Convolution.cntk:command=train:test
configparameters: 02_Convolution.cntk:ConfigDir=C:\src\cntk_github\Tests\EndToEndTests\CNTKTextFormatReader\Examples\Image\MNIST\Config
configparameters: 02_Convolution.cntk:currentDirectory=E:\cygwin64\tmp\cntk-test-20160426172357.371686\CNTKTextFormatReader\Examples\Image\MNIST_02_Convolution@release_gpu\TestData
configparameters: 02_Convolution.cntk:DataDir=E:\cygwin64\tmp\cntk-test-20160426172357.371686\CNTKTextFormatReader\Examples\Image\MNIST_02_Convolution@release_gpu\TestData
configparameters: 02_Convolution.cntk:deviceId=0
configparameters: 02_Convolution.cntk:imageLayout=cudnn
configparameters: 02_Convolution.cntk:initOnCPUOnly=true
configparameters: 02_Convolution.cntk:ModelDir=E:\cygwin64\tmp\cntk-test-20160426172357.371686\CNTKTextFormatReader\Examples\Image\MNIST_02_Convolution@release_gpu/Models
configparameters: 02_Convolution.cntk:modelPath=E:\cygwin64\tmp\cntk-test-20160426172357.371686\CNTKTextFormatReader\Examples\Image\MNIST_02_Convolution@release_gpu/Models/02_Convolution
configparameters: 02_Convolution.cntk:ndlMacros=C:\src\cntk_github\Tests\EndToEndTests\CNTKTextFormatReader\Examples\Image\MNIST\Config/Macros.ndl
configparameters: 02_Convolution.cntk:numMBsToShowResult=500
configparameters: 02_Convolution.cntk:OutputDir=E:\cygwin64\tmp\cntk-test-20160426172357.371686\CNTKTextFormatReader\Examples\Image\MNIST_02_Convolution@release_gpu
configparameters: 02_Convolution.cntk:precision=float
configparameters: 02_Convolution.cntk:prefetch=true
configparameters: 02_Convolution.cntk:RootDir=..
configparameters: 02_Convolution.cntk:RunDir=E:\cygwin64\tmp\cntk-test-20160426172357.371686\CNTKTextFormatReader\Examples\Image\MNIST_02_Convolution@release_gpu
configparameters: 02_Convolution.cntk:test=[
    action = test
    minibatchSize = 16
    NDLNetworkBuilder = [
        networkDescription = "C:\src\cntk_github\Tests\EndToEndTests\CNTKTextFormatReader\Examples\Image\MNIST\Config/02_Convolution.ndl"
    ]
    reader = [
        readerType = "CNTKTextFormatReader"
        file = "E:\cygwin64\tmp\cntk-test-20160426172357.371686\CNTKTextFormatReader\Examples\Image\MNIST_02_Convolution@release_gpu\TestData/Test-28x28_cntk_text.txt"
        input = [
            features = [
                dim = 784
                format = "dense"
            ]
            labels = [
                dim = 10
                format = "dense"
            ]
        ]
    ]
]

configparameters: 02_Convolution.cntk:timestamping=true
configparameters: 02_Convolution.cntk:traceLevel=1
configparameters: 02_Convolution.cntk:train=[
    action = "train"
    NDLNetworkBuilder = [
        networkDescription = "C:\src\cntk_github\Tests\EndToEndTests\CNTKTextFormatReader\Examples\Image\MNIST\Config/02_Convolution.ndl"
    ]
    SGD = [
        epochSize = 60000
        minibatchSize = 32
        learningRatesPerMB = 0.1*5:0.3
        momentumPerMB = 0*10:0.7
        maxEpochs = 15
    ]
    reader = [
        readerType = "CNTKTextFormatReader"
        file = "E:\cygwin64\tmp\cntk-test-20160426172357.371686\CNTKTextFormatReader\Examples\Image\MNIST_02_Convolution@release_gpu\TestData/Train-28x28_cntk_text.txt"
        input = [
            features = [
                dim = 784
                format = "dense"
            ]
            labels = [
                dim = 10
                format = "dense"
            ]
        ]
    ]
] [SGD=[maxEpochs=3]]

04/26/2016 16:23:58: <<<<<<<<<<<<<<<<<<<< PROCESSED CONFIG WITH ALL VARIABLES RESOLVED <<<<<<<<<<<<<<<<<<<<
04/26/2016 16:23:58: Commands: train test
04/26/2016 16:23:58: Precision = "float"
04/26/2016 16:23:58: CNTKModelPath: E:\cygwin64\tmp\cntk-test-20160426172357.371686\CNTKTextFormatReader\Examples\Image\MNIST_02_Convolution@release_gpu/Models/02_Convolution
04/26/2016 16:23:58: CNTKCommandTrainInfo: train : 3
04/26/2016 16:23:58: CNTKCommandTrainInfo: CNTKNoMoreCommands_Total : 3

04/26/2016 16:23:58: ##############################################################################
04/26/2016 16:23:58: #                                                                            #
04/26/2016 16:23:58: # Action "train"                                                             #
04/26/2016 16:23:58: #                                                                            #
04/26/2016 16:23:58: ##############################################################################

04/26/2016 16:23:58: CNTKCommandTrainBegin: train
NDLBuilder Using GPU 0

04/26/2016 16:23:58: Creating virgin network.

Post-processing network...

3 roots:
	ce = CrossEntropyWithSoftmax()
	err = ErrorPrediction()
	ol.z = Plus()

Validating network. 27 nodes to process in pass 1.

Validating --> labels = InputValue() :  -> [10 x *]
Validating --> ol.W = LearnableParameter() :  -> [10 x 128]
Validating --> h1.W = LearnableParameter() :  -> [128 x 7 x 7 x 32]
Validating --> conv2.w.W = LearnableParameter() :  -> [32 x 400]
Validating --> conv1.w.W = LearnableParameter() :  -> [16 x 25]
Validating --> featScale = LearnableParameter() :  -> [1 x 1]
Validating --> features = InputValue() :  -> [28 x 28 x 1 x *]
Validating --> featScaled = ElementTimes (featScale, features) : [1 x 1], [28 x 28 x 1 x *] -> [28 x 28 x 1 x *]
Validating --> conv1.c.c = Convolution (conv1.w.W, featScaled) : [16 x 25], [28 x 28 x 1 x *] -> [28 x 28 x 16 x *]
Validating --> conv1.b.b = LearnableParameter() :  -> [1 x 1 x 16]
Validating --> conv1.cpb = Plus (conv1.c.c, conv1.b.b) : [28 x 28 x 16 x *], [1 x 1 x 16] -> [28 x 28 x 16 x *]
Validating --> conv1.out = RectifiedLinear (conv1.cpb) : [28 x 28 x 16 x *] -> [28 x 28 x 16 x *]
Validating --> pool1 = MaxPooling (conv1.out) : [28 x 28 x 16 x *] -> [14 x 14 x 16 x *]
Validating --> conv2.c.c = Convolution (conv2.w.W, pool1) : [32 x 400], [14 x 14 x 16 x *] -> [14 x 14 x 32 x *]
Validating --> conv2.b.b = LearnableParameter() :  -> [1 x 1 x 32]
Validating --> conv2.cpb = Plus (conv2.c.c, conv2.b.b) : [14 x 14 x 32 x *], [1 x 1 x 32] -> [14 x 14 x 32 x *]
Validating --> conv2.out = RectifiedLinear (conv2.cpb) : [14 x 14 x 32 x *] -> [14 x 14 x 32 x *]
Validating --> pool2.p = Pooling (conv2.out) : [14 x 14 x 32 x *] -> [7 x 7 x 32 x *]
Validating --> h1.t = Times (h1.W, pool2.p) : [128 x 7 x 7 x 32], [7 x 7 x 32 x *] -> [128 x *]
Validating --> h1.b = LearnableParameter() :  -> [128 x 1]
Validating --> h1.z = Plus (h1.t, h1.b) : [128 x *], [128 x 1] -> [128 x 1 x *]
Validating --> h1.y = Sigmoid (h1.z) : [128 x 1 x *] -> [128 x 1 x *]
Validating --> ol.t = Times (ol.W, h1.y) : [10 x 128], [128 x 1 x *] -> [10 x 1 x *]
Validating --> ol.b = LearnableParameter() :  -> [10 x 1]
Validating --> ol.z = Plus (ol.t, ol.b) : [10 x 1 x *], [10 x 1] -> [10 x 1 x *]
Validating --> ce = CrossEntropyWithSoftmax (labels, ol.z) : [10 x *], [10 x 1 x *] -> [1]
Validating --> err = ErrorPrediction (labels, ol.z) : [10 x *], [10 x 1 x *] -> [1]

Validating network. 16 nodes to process in pass 2.


Validating network, final pass.


Using cuDNN convolution engine for geometry: Input: 28 x 28 x 1, Output: 28 x 28 x 16, Kernel: 5 x 5 x 1, Map: 1 x 1 x 16, Stride: 1 x 1 x 1, Sharing: (1), AutoPad: (1), LowerPad: 0, UpperPad: 0.

Using cuDNN convolution engine for geometry: Input: 28 x 28 x 16, Output: 14 x 14 x 16, Kernel: 2 x 2 x 1, Map: 1, Stride: 2 x 2 x 1, Sharing: (1), AutoPad: (0), LowerPad: 0, UpperPad: 0.

Using cuDNN convolution engine for geometry: Input: 14 x 14 x 16, Output: 14 x 14 x 32, Kernel: 5 x 5 x 16, Map: 32, Stride: 1 x 1 x 16, Sharing: (1, 1, 1), AutoPad: (1, 1, 0), LowerPad: 0, UpperPad: 0.

Using cuDNN convolution engine for geometry: Input: 14 x 14 x 32, Output: 7 x 7 x 32, Kernel: 2 x 2 x 1, Map: 1, Stride: 2 x 2 x 1, Sharing: (1), AutoPad: (1, 1, 0), LowerPad: 0, UpperPad: 0.


11 out of 27 nodes do not share the minibatch layout with the input data.

Post-processing network complete.

04/26/2016 16:23:59: Created model with 27 nodes on GPU 0.

04/26/2016 16:23:59: Training criterion node(s):
04/26/2016 16:23:59: 	ce = CrossEntropyWithSoftmax

04/26/2016 16:23:59: Evaluation criterion node(s):

04/26/2016 16:23:59: 	err = ErrorPrediction


Allocating matrices for forward and/or backward propagation.

Memory Sharing Structure:

0000000000000000: {[err Gradient[1]] [featScale Gradient[1 x 1]] [featScaled Gradient[28 x 28 x 1 x *]] [features Gradient[28 x 28 x 1 x *]] [labels Gradient[10 x *]] }
000000C3C26A0C50: {[conv1.b.b Value[1 x 1 x 16]] }
000000C3C274D210: {[featScale Value[1 x 1]] }
000000C3C274D530: {[labels Value[10 x *]] }
000000C3C274D670: {[conv1.w.W Value[16 x 25]] }
000000C3C274DC10: {[features Value[28 x 28 x 1 x *]] }
000000C3D9FC3980: {[conv2.w.W Value[32 x 400]] }
000000C3D9FC3A20: {[h1.b Value[128 x 1]] }
000000C3D9FC3B60: {[ol.W Value[10 x 128]] }
000000C3D9FC4740: {[conv2.b.b Value[1 x 1 x 32]] }
000000C3D9FC4CE0: {[h1.W Value[128 x 7 x 7 x 32]] }
000000C3D9FC50A0: {[ol.b Value[10 x 1]] }
000000C3DDA95940: {[conv1.c.c Value[28 x 28 x 16 x *]] }
000000C3DDA95A80: {[conv1.cpb Value[28 x 28 x 16 x *]] [conv1.w.W Gradient[16 x 25]] }
000000C3DDA95B20: {[conv2.c.c Value[14 x 14 x 32 x *]] }
000000C3DDA95BC0: {[conv1.b.b Gradient[1 x 1 x 16]] [conv1.out Gradient[28 x 28 x 16 x *]] }
000000C3DDA95DA0: {[conv2.cpb Value[14 x 14 x 32 x *]] [conv2.w.W Gradient[32 x 400]] }
000000C3DDA95E40: {[h1.t Gradient[128 x *]] [h1.y Value[128 x 1 x *]] }
000000C3DDA95F80: {[err Value[1]] }
000000C3DDA96020: {[ce Gradient[1]] }
000000C3DDA96160: {[h1.b Gradient[128 x 1]] [h1.y Gradient[128 x 1 x *]] [ol.z Gradient[10 x 1 x *]] }
000000C3DDA96340: {[conv2.b.b Gradient[1 x 1 x 32]] [conv2.out Gradient[14 x 14 x 32 x *]] [h1.t Value[128 x *]] }
000000C3DDA963E0: {[ol.W Gradient[10 x 128]] [ol.z Value[10 x 1 x *]] }
000000C3DDA96480: {[ol.t Gradient[10 x 1 x *]] }
000000C3DDA96520: {[ol.b Gradient[10 x 1]] }
000000C3DDA96980: {[conv1.c.c Gradient[28 x 28 x 16 x *]] [conv1.out Value[28 x 28 x 16 x *]] }
000000C3DDA96A20: {[conv2.cpb Gradient[14 x 14 x 32 x *]] [pool1 Gradient[14 x 14 x 16 x *]] [pool2.p Value[7 x 7 x 32 x *]] }
000000C3DDA96AC0: {[featScaled Value[28 x 28 x 1 x *]] }
000000C3DDA96B60: {[h1.z Gradient[128 x 1 x *]] [ol.t Value[10 x 1 x *]] [pool2.p Gradient[7 x 7 x 32 x *]] }
000000C3DDA96CA0: {[h1.W Gradient[128 x 7 x 7 x 32]] [h1.z Value[128 x 1 x *]] }
000000C3DDA96DE0: {[conv1.cpb Gradient[28 x 28 x 16 x *]] [pool1 Value[14 x 14 x 16 x *]] }
000000C3DDA96E80: {[conv2.c.c Gradient[14 x 14 x 32 x *]] [conv2.out Value[14 x 14 x 32 x *]] }
000000C3DDA96F20: {[ce Value[1]] }

04/26/2016 16:23:59: No PreCompute nodes found, skipping PreCompute step.

04/26/2016 16:23:59: Starting Epoch 1: learning rate per sample = 0.003125  effective momentum = 0.000000  momentum as time constant = 0.0 samples

04/26/2016 16:23:59: Starting minibatch loop.
04/26/2016 16:24:06:  Epoch[ 1 of 3]-Minibatch[   1- 500, 26.67%]: SamplesSeen = 16000; TrainLossPerSample =  1.68892993; EvalErr[0]PerSample = 0.59968750; TotalTime = 6.5291s; SamplesPerSecond = 2450.6
04/26/2016 16:24:10:  Epoch[ 1 of 3]-Minibatch[ 501-1000, 53.33%]: SamplesSeen = 16000; TrainLossPerSample =  0.22110034; EvalErr[0]PerSample = 0.06050000; TotalTime = 4.3576s; SamplesPerSecond = 3671.7
04/26/2016 16:24:15:  Epoch[ 1 of 3]-Minibatch[1001-1500, 80.00%]: SamplesSeen = 16000; TrainLossPerSample =  0.12348169; EvalErr[0]PerSample = 0.03562500; TotalTime = 4.3628s; SamplesPerSecond = 3667.3
04/26/2016 16:24:18: Finished Epoch[ 1 of 3]: [Training Set] TrainLossPerSample = 0.56224688; TotalSamplesSeen = 60000; EvalErrPerSample = 0.19148333; AvgLearningRatePerSample = 0.003125; EpochTime=18.5699
04/26/2016 16:24:18: SGD: Saving checkpoint model 'E:\cygwin64\tmp\cntk-test-20160426172357.371686\CNTKTextFormatReader\Examples\Image\MNIST_02_Convolution@release_gpu/Models/02_Convolution.1'

04/26/2016 16:24:18: Starting Epoch 2: learning rate per sample = 0.003125  effective momentum = 0.000000  momentum as time constant = 0.0 samples

04/26/2016 16:24:18: Starting minibatch loop.
04/26/2016 16:24:22:  Epoch[ 2 of 3]-Minibatch[   1- 500, 26.67%]: SamplesSeen = 16000; TrainLossPerSample =  0.08104019; EvalErr[0]PerSample = 0.02275000; TotalTime = 4.3915s; SamplesPerSecond = 3643.4
04/26/2016 16:24:27:  Epoch[ 2 of 3]-Minibatch[ 501-1000, 53.33%]: SamplesSeen = 16000; TrainLossPerSample =  0.06912172; EvalErr[0]PerSample = 0.02118750; TotalTime = 4.3921s; SamplesPerSecond = 3642.9
04/26/2016 16:24:31:  Epoch[ 2 of 3]-Minibatch[1001-1500, 80.00%]: SamplesSeen = 16000; TrainLossPerSample =  0.06624557; EvalErr[0]PerSample = 0.02081250; TotalTime = 4.4331s; SamplesPerSecond = 3609.2
04/26/2016 16:24:34: Finished Epoch[ 2 of 3]: [Training Set] TrainLossPerSample = 0.068943823; TotalSamplesSeen = 120000; EvalErrPerSample = 0.020533333; AvgLearningRatePerSample = 0.003125; EpochTime=16.5675
04/26/2016 16:24:34: SGD: Saving checkpoint model 'E:\cygwin64\tmp\cntk-test-20160426172357.371686\CNTKTextFormatReader\Examples\Image\MNIST_02_Convolution@release_gpu/Models/02_Convolution.2'

04/26/2016 16:24:34: Starting Epoch 3: learning rate per sample = 0.003125  effective momentum = 0.000000  momentum as time constant = 0.0 samples

04/26/2016 16:24:34: Starting minibatch loop.
04/26/2016 16:24:39:  Epoch[ 3 of 3]-Minibatch[   1- 500, 26.67%]: SamplesSeen = 16000; TrainLossPerSample =  0.05004311; EvalErr[0]PerSample = 0.01518750; TotalTime = 4.4302s; SamplesPerSecond = 3611.6
04/26/2016 16:24:43:  Epoch[ 3 of 3]-Minibatch[ 501-1000, 53.33%]: SamplesSeen = 16000; TrainLossPerSample =  0.04282177; EvalErr[0]PerSample = 0.01268750; TotalTime = 4.4232s; SamplesPerSecond = 3617.3
04/26/2016 16:24:48:  Epoch[ 3 of 3]-Minibatch[1001-1500, 80.00%]: SamplesSeen = 16000; TrainLossPerSample =  0.04509887; EvalErr[0]PerSample = 0.01318750; TotalTime = 4.4269s; SamplesPerSecond = 3614.3
04/26/2016 16:24:51: Finished Epoch[ 3 of 3]: [Training Set] TrainLossPerSample = 0.044613822; TotalSamplesSeen = 180000; EvalErrPerSample = 0.013; AvgLearningRatePerSample = 0.003125; EpochTime=16.6151
04/26/2016 16:24:51: SGD: Saving checkpoint model 'E:\cygwin64\tmp\cntk-test-20160426172357.371686\CNTKTextFormatReader\Examples\Image\MNIST_02_Convolution@release_gpu/Models/02_Convolution'
04/26/2016 16:24:51: CNTKCommandTrainEnd: train

04/26/2016 16:24:51: Action "train" complete.


04/26/2016 16:24:51: ##############################################################################
04/26/2016 16:24:51: #                                                                            #
04/26/2016 16:24:51: # Action "test"                                                              #
04/26/2016 16:24:51: #                                                                            #
04/26/2016 16:24:51: ##############################################################################


Post-processing network...

3 roots:
	ce = CrossEntropyWithSoftmax()
	err = ErrorPrediction()
	ol.z = Plus()

Validating network. 27 nodes to process in pass 1.

Validating --> labels = InputValue() :  -> [10 x *1]
Validating --> ol.W = LearnableParameter() :  -> [10 x 128]
Validating --> h1.W = LearnableParameter() :  -> [128 x 7 x 7 x 32]
Validating --> conv2.w.W = LearnableParameter() :  -> [32 x 400]
Validating --> conv1.w.W = LearnableParameter() :  -> [16 x 25]
Validating --> featScale = LearnableParameter() :  -> [1 x 1]
Validating --> features = InputValue() :  -> [28 x 28 x 1 x *1]
Validating --> featScaled = ElementTimes (featScale, features) : [1 x 1], [28 x 28 x 1 x *1] -> [28 x 28 x 1 x *1]
Validating --> conv1.c.c = Convolution (conv1.w.W, featScaled) : [16 x 25], [28 x 28 x 1 x *1] -> [28 x 28 x 16 x *1]
Validating --> conv1.b.b = LearnableParameter() :  -> [1 x 1 x 16]
Validating --> conv1.cpb = Plus (conv1.c.c, conv1.b.b) : [28 x 28 x 16 x *1], [1 x 1 x 16] -> [28 x 28 x 16 x *1]
Validating --> conv1.out = RectifiedLinear (conv1.cpb) : [28 x 28 x 16 x *1] -> [28 x 28 x 16 x *1]
Validating --> pool1 = MaxPooling (conv1.out) : [28 x 28 x 16 x *1] -> [14 x 14 x 16 x *1]
Validating --> conv2.c.c = Convolution (conv2.w.W, pool1) : [32 x 400], [14 x 14 x 16 x *1] -> [14 x 14 x 32 x *1]
Validating --> conv2.b.b = LearnableParameter() :  -> [1 x 1 x 32]
Validating --> conv2.cpb = Plus (conv2.c.c, conv2.b.b) : [14 x 14 x 32 x *1], [1 x 1 x 32] -> [14 x 14 x 32 x *1]
Validating --> conv2.out = RectifiedLinear (conv2.cpb) : [14 x 14 x 32 x *1] -> [14 x 14 x 32 x *1]
Validating --> pool2.p = Pooling (conv2.out) : [14 x 14 x 32 x *1] -> [7 x 7 x 32 x *1]
Validating --> h1.t = Times (h1.W, pool2.p) : [128 x 7 x 7 x 32], [7 x 7 x 32 x *1] -> [128 x *1]
Validating --> h1.b = LearnableParameter() :  -> [128 x 1]
Validating --> h1.z = Plus (h1.t, h1.b) : [128 x *1], [128 x 1] -> [128 x 1 x *1]
Validating --> h1.y = Sigmoid (h1.z) : [128 x 1 x *1] -> [128 x 1 x *1]
Validating --> ol.t = Times (ol.W, h1.y) : [10 x 128], [128 x 1 x *1] -> [10 x 1 x *1]
Validating --> ol.b = LearnableParameter() :  -> [10 x 1]
Validating --> ol.z = Plus (ol.t, ol.b) : [10 x 1 x *1], [10 x 1] -> [10 x 1 x *1]
Validating --> ce = CrossEntropyWithSoftmax (labels, ol.z) : [10 x *1], [10 x 1 x *1] -> [1]
Validating --> err = ErrorPrediction (labels, ol.z) : [10 x *1], [10 x 1 x *1] -> [1]

Validating network. 16 nodes to process in pass 2.


Validating network, final pass.


Using cuDNN convolution engine for geometry: Input: 28 x 28 x 1, Output: 28 x 28 x 16, Kernel: 5 x 5 x 1, Map: 1 x 1 x 16, Stride: 1 x 1 x 1, Sharing: (1), AutoPad: (1), LowerPad: 0, UpperPad: 0.

Using cuDNN convolution engine for geometry: Input: 28 x 28 x 16, Output: 14 x 14 x 16, Kernel: 2 x 2 x 1, Map: 1, Stride: 2 x 2 x 1, Sharing: (1), AutoPad: (0), LowerPad: 0, UpperPad: 0.

Using cuDNN convolution engine for geometry: Input: 14 x 14 x 16, Output: 14 x 14 x 32, Kernel: 5 x 5 x 16, Map: 32, Stride: 1 x 1 x 16, Sharing: (1, 1, 1), AutoPad: (1, 1, 0), LowerPad: 0, UpperPad: 0.

Using cuDNN convolution engine for geometry: Input: 14 x 14 x 32, Output: 7 x 7 x 32, Kernel: 2 x 2 x 1, Map: 1, Stride: 2 x 2 x 1, Sharing: (1), AutoPad: (1, 1, 0), LowerPad: 0, UpperPad: 0.


11 out of 27 nodes do not share the minibatch layout with the input data.

Post-processing network complete.

evalNodeNames are not specified, using all the default evalnodes and training criterion nodes.


Allocating matrices for forward and/or backward propagation.

Memory Sharing Structure:

0000000000000000: {[ce Gradient[1]] [conv1.b.b Gradient[1 x 1 x 16]] [conv1.c.c Gradient[28 x 28 x 16 x *1]] [conv1.cpb Gradient[28 x 28 x 16 x *1]] [conv1.out Gradient[28 x 28 x 16 x *1]] [conv1.w.W Gradient[16 x 25]] [conv2.b.b Gradient[1 x 1 x 32]] [conv2.c.c Gradient[14 x 14 x 32 x *1]] [conv2.cpb Gradient[14 x 14 x 32 x *1]] [conv2.out Gradient[14 x 14 x 32 x *1]] [conv2.w.W Gradient[32 x 400]] [err Gradient[1]] [featScale Gradient[1 x 1]] [featScaled Gradient[28 x 28 x 1 x *1]] [features Gradient[28 x 28 x 1 x *1]] [h1.W Gradient[128 x 7 x 7 x 32]] [h1.b Gradient[128 x 1]] [h1.t Gradient[128 x *1]] [h1.y Gradient[128 x 1 x *1]] [h1.z Gradient[128 x 1 x *1]] [labels Gradient[10 x *1]] [ol.W Gradient[10 x 128]] [ol.b Gradient[10 x 1]] [ol.t Gradient[10 x 1 x *1]] [ol.z Gradient[10 x 1 x *1]] [pool1 Gradient[14 x 14 x 16 x *1]] [pool2.p Gradient[7 x 7 x 32 x *1]] }
000000C3E10AA780: {[conv2.w.W Value[32 x 400]] }
000000C3E10AA960: {[conv1.w.W Value[16 x 25]] }
000000C3E10AABE0: {[h1.W Value[128 x 7 x 7 x 32]] }
000000C3E10AAF00: {[labels Value[10 x *1]] }
000000C3E10AB540: {[conv1.b.b Value[1 x 1 x 16]] }
000000C3E10AB720: {[conv2.b.b Value[1 x 1 x 32]] }
000000C3E10ABEA0: {[features Value[28 x 28 x 1 x *1]] }
000000C3E10AC120: {[featScale Value[1 x 1]] }
000000C3E10AC1C0: {[h1.b Value[128 x 1]] }
000000C3E10AD020: {[h1.t Value[128 x *1]] }
000000C3E10AD660: {[conv2.c.c Value[14 x 14 x 32 x *1]] }
000000C3E10AD700: {[pool2.p Value[7 x 7 x 32 x *1]] }
000000C3E10AD7A0: {[conv1.out Value[28 x 28 x 16 x *1]] }
000000C3E10AD8E0: {[ol.t Value[10 x 1 x *1]] }
000000C3E10AD980: {[err Value[1]] }
000000C3E10ADB60: {[ol.z Value[10 x 1 x *1]] }
000000C3E10ADC00: {[conv1.c.c Value[28 x 28 x 16 x *1]] }
000000C3E10ADCA0: {[ol.b Value[10 x 1]] }
000000C3E10ADD40: {[ol.W Value[10 x 128]] }
000000C3E10ADE80: {[conv2.out Value[14 x 14 x 32 x *1]] }
000000C3E10AE100: {[featScaled Value[28 x 28 x 1 x *1]] }
000000C3E10AE240: {[conv2.cpb Value[14 x 14 x 32 x *1]] }
000000C3E10AE2E0: {[pool1 Value[14 x 14 x 16 x *1]] }
000000C3E10AE380: {[conv1.cpb Value[28 x 28 x 16 x *1]] }
000000C3E10AE420: {[h1.y Value[128 x 1 x *1]] }
000000C3E10AE560: {[ce Value[1]] }
000000C3E10AE600: {[h1.z Value[128 x 1 x *1]] }

Final Results: Minibatch[1-625]: SamplesSeen = 10000    err: ErrorPrediction/Sample = 0.014    ce: CrossEntropyWithSoftmax/Sample = 0.04428638    Perplexity = 1.0452817    

04/26/2016 16:25:01: Action "test" complete.

04/26/2016 16:25:01: __COMPLETED__