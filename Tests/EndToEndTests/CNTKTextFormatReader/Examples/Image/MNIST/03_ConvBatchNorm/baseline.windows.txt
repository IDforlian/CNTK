=== Running /cygdrive/c/src/cntk_github/x64/release/cntk.exe configFile=C:\src\cntk_github\Tests\EndToEndTests\CNTKTextFormatReader\Examples\Image\MNIST\Config/03_ConvBatchNorm.cntk currentDirectory=E:\cygwin64\tmp\cntk-test-20160426172516.865730\CNTKTextFormatReader\Examples\Image\MNIST_03_ConvBatchNorm@release_gpu\TestData RunDir=E:\cygwin64\tmp\cntk-test-20160426172516.865730\CNTKTextFormatReader\Examples\Image\MNIST_03_ConvBatchNorm@release_gpu DataDir=E:\cygwin64\tmp\cntk-test-20160426172516.865730\CNTKTextFormatReader\Examples\Image\MNIST_03_ConvBatchNorm@release_gpu\TestData ConfigDir=C:\src\cntk_github\Tests\EndToEndTests\CNTKTextFormatReader\Examples\Image\MNIST\Config OutputDir=E:\cygwin64\tmp\cntk-test-20160426172516.865730\CNTKTextFormatReader\Examples\Image\MNIST_03_ConvBatchNorm@release_gpu DeviceId=0 timestamping=true train=[SGD=[maxEpochs=3]] imageLayout="cudnn"
-------------------------------------------------------------------
Build info: 

		Built time: Apr 26 2016 14:22:06
		Last modified date: Thu Apr  7 11:05:47 2016
		Build type: Release
		Build target: GPU
		With 1bit-SGD: no
		CUDA_PATH: C:\Program Files\NVIDIA GPU Computing Toolkit\CUDA\v7.0
		CUB_PATH: E:\lib\cub-1.4.1
		CUDNN_PATH: E:\lib\cuDNN_v4
		Build Branch: alrezni/examples_text
		Build SHA1: bacd6681dae457fcc823f84c2e635d69134b1219
		Built by alrezni on DIFFENG
		Build Path: c:\src\cntk_github\Source\CNTK\
-------------------------------------------------------------------
Changed current directory to E:\cygwin64\tmp\cntk-test-20160426172516.865730\CNTKTextFormatReader\Examples\Image\MNIST_03_ConvBatchNorm@release_gpu\TestData
04/26/2016 16:25:17: -------------------------------------------------------------------
04/26/2016 16:25:17: Build info: 

04/26/2016 16:25:17: 		Built time: Apr 26 2016 14:22:06
04/26/2016 16:25:17: 		Last modified date: Thu Apr  7 11:05:47 2016
04/26/2016 16:25:17: 		Build type: Release
04/26/2016 16:25:17: 		Build target: GPU
04/26/2016 16:25:17: 		With 1bit-SGD: no
04/26/2016 16:25:17: 		CUDA_PATH: C:\Program Files\NVIDIA GPU Computing Toolkit\CUDA\v7.0
04/26/2016 16:25:17: 		CUB_PATH: E:\lib\cub-1.4.1
04/26/2016 16:25:17: 		CUDNN_PATH: E:\lib\cuDNN_v4
04/26/2016 16:25:17: 		Build Branch: alrezni/examples_text
04/26/2016 16:25:17: 		Build SHA1: bacd6681dae457fcc823f84c2e635d69134b1219
04/26/2016 16:25:17: 		Built by alrezni on DIFFENG
04/26/2016 16:25:17: 		Build Path: c:\src\cntk_github\Source\CNTK\
04/26/2016 16:25:17: -------------------------------------------------------------------

04/26/2016 16:25:17: Running on DIFFENG at 2016/04/26 16:25:17
04/26/2016 16:25:17: Command line: 
C:\src\cntk_github\x64\release\cntk.exe  configFile=C:\src\cntk_github\Tests\EndToEndTests\CNTKTextFormatReader\Examples\Image\MNIST\Config/03_ConvBatchNorm.cntk  currentDirectory=E:\cygwin64\tmp\cntk-test-20160426172516.865730\CNTKTextFormatReader\Examples\Image\MNIST_03_ConvBatchNorm@release_gpu\TestData  RunDir=E:\cygwin64\tmp\cntk-test-20160426172516.865730\CNTKTextFormatReader\Examples\Image\MNIST_03_ConvBatchNorm@release_gpu  DataDir=E:\cygwin64\tmp\cntk-test-20160426172516.865730\CNTKTextFormatReader\Examples\Image\MNIST_03_ConvBatchNorm@release_gpu\TestData  ConfigDir=C:\src\cntk_github\Tests\EndToEndTests\CNTKTextFormatReader\Examples\Image\MNIST\Config  OutputDir=E:\cygwin64\tmp\cntk-test-20160426172516.865730\CNTKTextFormatReader\Examples\Image\MNIST_03_ConvBatchNorm@release_gpu  DeviceId=0  timestamping=true  train=[SGD=[maxEpochs=3]]  imageLayout="cudnn"



04/26/2016 16:25:17: >>>>>>>>>>>>>>>>>>>> RAW CONFIG (VARIABLES NOT RESOLVED) >>>>>>>>>>>>>>>>>>>>
04/26/2016 16:25:17: RootDir = ".."
ConfigDir = "$RootDir$/Config"
DataDir   = "$RootDir$/Data"
OutputDir = "$RootDir$/Output"
ModelDir  = "$OutputDir$/Models"
deviceId = 0
imageLayout = "cudnn"
command = train:test
precision = "float"
modelPath = "$ModelDir$/03_ConvBatchNorm"
ndlMacros = "$ConfigDir$/Macros.ndl"
traceLevel=1
numMBsToShowResult=500
initOnCPUOnly=true
train = [
    action = "train"
    NDLNetworkBuilder = [
        networkDescription = "$ConfigDir$/03_ConvBatchNorm.ndl"
    ]
    SGD = [
        epochSize = 60000
        minibatchSize = 32
        learningRatesPerMB = 0.5:0.1
        momentumPerMB = 0.9
        maxEpochs = 2
        batchNormalizationBlendTimeConstant=0:1#INF
    ]
    reader = [
        readerType = "CNTKTextFormatReader"
        file = "$DataDir$/Train-28x28_cntk_text.txt"
        input = [
            features = [
                dim = 784
                format = "dense"
            ]
            labels = [
                dim = 10
                format = "dense"
            ]
        ]
    ]
]
test = [
    action = "test"
    minibatchSize = 32
    modelPath=$ModelDir$/03_ConvBatchNorm
    NDLNetworkBuilder = [
        networkDescription = "$ConfigDir$/03_ConvBatchNorm.ndl"
    ]
    reader = [
        readerType = "CNTKTextFormatReader"
        file = "$DataDir$/Test-28x28_cntk_text.txt"
        input = [
            features = [
                dim = 784
                format = "dense"
            ]
            labels = [
                dim = 10
                format = "dense"
            ]
        ]
    ]
]
currentDirectory=E:\cygwin64\tmp\cntk-test-20160426172516.865730\CNTKTextFormatReader\Examples\Image\MNIST_03_ConvBatchNorm@release_gpu\TestData
RunDir=E:\cygwin64\tmp\cntk-test-20160426172516.865730\CNTKTextFormatReader\Examples\Image\MNIST_03_ConvBatchNorm@release_gpu
DataDir=E:\cygwin64\tmp\cntk-test-20160426172516.865730\CNTKTextFormatReader\Examples\Image\MNIST_03_ConvBatchNorm@release_gpu\TestData
ConfigDir=C:\src\cntk_github\Tests\EndToEndTests\CNTKTextFormatReader\Examples\Image\MNIST\Config
OutputDir=E:\cygwin64\tmp\cntk-test-20160426172516.865730\CNTKTextFormatReader\Examples\Image\MNIST_03_ConvBatchNorm@release_gpu
DeviceId=0
timestamping=true
train=[SGD=[maxEpochs=3]]
imageLayout="cudnn"

04/26/2016 16:25:17: <<<<<<<<<<<<<<<<<<<< RAW CONFIG (VARIABLES NOT RESOLVED)  <<<<<<<<<<<<<<<<<<<<

04/26/2016 16:25:17: >>>>>>>>>>>>>>>>>>>> RAW CONFIG WITH ALL VARIABLES RESOLVED >>>>>>>>>>>>>>>>>>>>
04/26/2016 16:25:17: RootDir = ".."
ConfigDir = "../Config"
DataDir   = "../Data"
OutputDir = "../Output"
ModelDir  = "E:\cygwin64\tmp\cntk-test-20160426172516.865730\CNTKTextFormatReader\Examples\Image\MNIST_03_ConvBatchNorm@release_gpu/Models"
deviceId = 0
imageLayout = "cudnn"
command = train:test
precision = "float"
modelPath = "E:\cygwin64\tmp\cntk-test-20160426172516.865730\CNTKTextFormatReader\Examples\Image\MNIST_03_ConvBatchNorm@release_gpu/Models/03_ConvBatchNorm"
ndlMacros = "C:\src\cntk_github\Tests\EndToEndTests\CNTKTextFormatReader\Examples\Image\MNIST\Config/Macros.ndl"
traceLevel=1
numMBsToShowResult=500
initOnCPUOnly=true
train = [
    action = "train"
    NDLNetworkBuilder = [
        networkDescription = "C:\src\cntk_github\Tests\EndToEndTests\CNTKTextFormatReader\Examples\Image\MNIST\Config/03_ConvBatchNorm.ndl"
    ]
    SGD = [
        epochSize = 60000
        minibatchSize = 32
        learningRatesPerMB = 0.5:0.1
        momentumPerMB = 0.9
        maxEpochs = 2
        batchNormalizationBlendTimeConstant=0:1#INF
    ]
    reader = [
        readerType = "CNTKTextFormatReader"
        file = "E:\cygwin64\tmp\cntk-test-20160426172516.865730\CNTKTextFormatReader\Examples\Image\MNIST_03_ConvBatchNorm@release_gpu\TestData/Train-28x28_cntk_text.txt"
        input = [
            features = [
                dim = 784
                format = "dense"
            ]
            labels = [
                dim = 10
                format = "dense"
            ]
        ]
    ]
]
test = [
    action = "test"
    minibatchSize = 32
    modelPath=E:\cygwin64\tmp\cntk-test-20160426172516.865730\CNTKTextFormatReader\Examples\Image\MNIST_03_ConvBatchNorm@release_gpu/Models/03_ConvBatchNorm
    NDLNetworkBuilder = [
        networkDescription = "C:\src\cntk_github\Tests\EndToEndTests\CNTKTextFormatReader\Examples\Image\MNIST\Config/03_ConvBatchNorm.ndl"
    ]
    reader = [
        readerType = "CNTKTextFormatReader"
        file = "E:\cygwin64\tmp\cntk-test-20160426172516.865730\CNTKTextFormatReader\Examples\Image\MNIST_03_ConvBatchNorm@release_gpu\TestData/Test-28x28_cntk_text.txt"
        input = [
            features = [
                dim = 784
                format = "dense"
            ]
            labels = [
                dim = 10
                format = "dense"
            ]
        ]
    ]
]
currentDirectory=E:\cygwin64\tmp\cntk-test-20160426172516.865730\CNTKTextFormatReader\Examples\Image\MNIST_03_ConvBatchNorm@release_gpu\TestData
RunDir=E:\cygwin64\tmp\cntk-test-20160426172516.865730\CNTKTextFormatReader\Examples\Image\MNIST_03_ConvBatchNorm@release_gpu
DataDir=E:\cygwin64\tmp\cntk-test-20160426172516.865730\CNTKTextFormatReader\Examples\Image\MNIST_03_ConvBatchNorm@release_gpu\TestData
ConfigDir=C:\src\cntk_github\Tests\EndToEndTests\CNTKTextFormatReader\Examples\Image\MNIST\Config
OutputDir=E:\cygwin64\tmp\cntk-test-20160426172516.865730\CNTKTextFormatReader\Examples\Image\MNIST_03_ConvBatchNorm@release_gpu
DeviceId=0
timestamping=true
train=[SGD=[maxEpochs=3]]
imageLayout="cudnn"

04/26/2016 16:25:17: <<<<<<<<<<<<<<<<<<<< RAW CONFIG WITH ALL VARIABLES RESOLVED <<<<<<<<<<<<<<<<<<<<

04/26/2016 16:25:17: >>>>>>>>>>>>>>>>>>>> PROCESSED CONFIG WITH ALL VARIABLES RESOLVED >>>>>>>>>>>>>>>>>>>>
configparameters: 03_ConvBatchNorm.cntk:command=train:test
configparameters: 03_ConvBatchNorm.cntk:ConfigDir=C:\src\cntk_github\Tests\EndToEndTests\CNTKTextFormatReader\Examples\Image\MNIST\Config
configparameters: 03_ConvBatchNorm.cntk:currentDirectory=E:\cygwin64\tmp\cntk-test-20160426172516.865730\CNTKTextFormatReader\Examples\Image\MNIST_03_ConvBatchNorm@release_gpu\TestData
configparameters: 03_ConvBatchNorm.cntk:DataDir=E:\cygwin64\tmp\cntk-test-20160426172516.865730\CNTKTextFormatReader\Examples\Image\MNIST_03_ConvBatchNorm@release_gpu\TestData
configparameters: 03_ConvBatchNorm.cntk:deviceId=0
configparameters: 03_ConvBatchNorm.cntk:imageLayout=cudnn
configparameters: 03_ConvBatchNorm.cntk:initOnCPUOnly=true
configparameters: 03_ConvBatchNorm.cntk:ModelDir=E:\cygwin64\tmp\cntk-test-20160426172516.865730\CNTKTextFormatReader\Examples\Image\MNIST_03_ConvBatchNorm@release_gpu/Models
configparameters: 03_ConvBatchNorm.cntk:modelPath=E:\cygwin64\tmp\cntk-test-20160426172516.865730\CNTKTextFormatReader\Examples\Image\MNIST_03_ConvBatchNorm@release_gpu/Models/03_ConvBatchNorm
configparameters: 03_ConvBatchNorm.cntk:ndlMacros=C:\src\cntk_github\Tests\EndToEndTests\CNTKTextFormatReader\Examples\Image\MNIST\Config/Macros.ndl
configparameters: 03_ConvBatchNorm.cntk:numMBsToShowResult=500
configparameters: 03_ConvBatchNorm.cntk:OutputDir=E:\cygwin64\tmp\cntk-test-20160426172516.865730\CNTKTextFormatReader\Examples\Image\MNIST_03_ConvBatchNorm@release_gpu
configparameters: 03_ConvBatchNorm.cntk:precision=float
configparameters: 03_ConvBatchNorm.cntk:RootDir=..
configparameters: 03_ConvBatchNorm.cntk:RunDir=E:\cygwin64\tmp\cntk-test-20160426172516.865730\CNTKTextFormatReader\Examples\Image\MNIST_03_ConvBatchNorm@release_gpu
configparameters: 03_ConvBatchNorm.cntk:test=[
    action = "test"
    minibatchSize = 32
    modelPath=E:\cygwin64\tmp\cntk-test-20160426172516.865730\CNTKTextFormatReader\Examples\Image\MNIST_03_ConvBatchNorm@release_gpu/Models/03_ConvBatchNorm
    NDLNetworkBuilder = [
        networkDescription = "C:\src\cntk_github\Tests\EndToEndTests\CNTKTextFormatReader\Examples\Image\MNIST\Config/03_ConvBatchNorm.ndl"
    ]
    reader = [
        readerType = "CNTKTextFormatReader"
        file = "E:\cygwin64\tmp\cntk-test-20160426172516.865730\CNTKTextFormatReader\Examples\Image\MNIST_03_ConvBatchNorm@release_gpu\TestData/Test-28x28_cntk_text.txt"
        input = [
            features = [
                dim = 784
                format = "dense"
            ]
            labels = [
                dim = 10
                format = "dense"
            ]
        ]
    ]
]

configparameters: 03_ConvBatchNorm.cntk:timestamping=true
configparameters: 03_ConvBatchNorm.cntk:traceLevel=1
configparameters: 03_ConvBatchNorm.cntk:train=[
    action = "train"
    NDLNetworkBuilder = [
        networkDescription = "C:\src\cntk_github\Tests\EndToEndTests\CNTKTextFormatReader\Examples\Image\MNIST\Config/03_ConvBatchNorm.ndl"
    ]
    SGD = [
        epochSize = 60000
        minibatchSize = 32
        learningRatesPerMB = 0.5:0.1
        momentumPerMB = 0.9
        maxEpochs = 2
        batchNormalizationBlendTimeConstant=0:1#INF
    ]
    reader = [
        readerType = "CNTKTextFormatReader"
        file = "E:\cygwin64\tmp\cntk-test-20160426172516.865730\CNTKTextFormatReader\Examples\Image\MNIST_03_ConvBatchNorm@release_gpu\TestData/Train-28x28_cntk_text.txt"
        input = [
            features = [
                dim = 784
                format = "dense"
            ]
            labels = [
                dim = 10
                format = "dense"
            ]
        ]
    ]
] [SGD=[maxEpochs=3]]

04/26/2016 16:25:17: <<<<<<<<<<<<<<<<<<<< PROCESSED CONFIG WITH ALL VARIABLES RESOLVED <<<<<<<<<<<<<<<<<<<<
04/26/2016 16:25:17: Commands: train test
04/26/2016 16:25:17: Precision = "float"
04/26/2016 16:25:17: CNTKModelPath: E:\cygwin64\tmp\cntk-test-20160426172516.865730\CNTKTextFormatReader\Examples\Image\MNIST_03_ConvBatchNorm@release_gpu/Models/03_ConvBatchNorm
04/26/2016 16:25:17: CNTKCommandTrainInfo: train : 3
04/26/2016 16:25:17: CNTKCommandTrainInfo: CNTKNoMoreCommands_Total : 3

04/26/2016 16:25:17: ##############################################################################
04/26/2016 16:25:17: #                                                                            #
04/26/2016 16:25:17: # Action "train"                                                             #
04/26/2016 16:25:17: #                                                                            #
04/26/2016 16:25:17: ##############################################################################

04/26/2016 16:25:17: CNTKCommandTrainBegin: train
NDLBuilder Using GPU 0

04/26/2016 16:25:17: Creating virgin network.

Post-processing network...

3 roots:
	ce = CrossEntropyWithSoftmax()
	err = ErrorPrediction()
	ol.z = Plus()

Validating network. 36 nodes to process in pass 1.

Validating --> labels = InputValue() :  -> [10 x *]
Validating --> ol.W = LearnableParameter() :  -> [10 x 128]
Validating --> h1.W = LearnableParameter() :  -> [128 x 1568]
Validating --> conv2.c.W = LearnableParameter() :  -> [32 x 400]
Validating --> conv1.c.W = LearnableParameter() :  -> [16 x 25]
Validating --> featScale = LearnableParameter() :  -> [1 x 1]
Validating --> features = InputValue() :  -> [28 x 28 x 1 x *]
Validating --> featScaled = ElementTimes (featScale, features) : [1 x 1], [28 x 28 x 1 x *] -> [28 x 28 x 1 x *]
Validating --> conv1.c.c.c = Convolution (conv1.c.W, featScaled) : [16 x 25], [28 x 28 x 1 x *] -> [28 x 28 x 16 x *]
Validating --> conv1.c.c.sc = LearnableParameter() :  -> [16 x 1]
Validating --> conv1.c.c.b = LearnableParameter() :  -> [16 x 1]
Validating --> conv1.c.c.m = LearnableParameter() :  -> [16 x 1]
Validating --> conv1.c.c.isd = LearnableParameter() :  -> [16 x 1]
Validating --> conv1.c.c.y = BatchNormalization (conv1.c.c.c, conv1.c.c.sc, conv1.c.c.b, conv1.c.c.m, conv1.c.c.isd) : [28 x 28 x 16 x *], [16 x 1], [16 x 1], [16 x 1], [16 x 1] -> [28 x 28 x 16 x *]
Validating --> conv1.y = RectifiedLinear (conv1.c.c.y) : [28 x 28 x 16 x *] -> [28 x 28 x 16 x *]
Validating --> pool1 = MaxPooling (conv1.y) : [28 x 28 x 16 x *] -> [14 x 14 x 16 x *]
Validating --> conv2.c.c.c = Convolution (conv2.c.W, pool1) : [32 x 400], [14 x 14 x 16 x *] -> [14 x 14 x 32 x *]
Validating --> conv2.c.c.sc = LearnableParameter() :  -> [32 x 1]
Validating --> conv2.c.c.b = LearnableParameter() :  -> [32 x 1]
Validating --> conv2.c.c.m = LearnableParameter() :  -> [32 x 1]
Validating --> conv2.c.c.isd = LearnableParameter() :  -> [32 x 1]
Validating --> conv2.c.c.y = BatchNormalization (conv2.c.c.c, conv2.c.c.sc, conv2.c.c.b, conv2.c.c.m, conv2.c.c.isd) : [14 x 14 x 32 x *], [32 x 1], [32 x 1], [32 x 1], [32 x 1] -> [14 x 14 x 32 x *]
Validating --> conv2.y = RectifiedLinear (conv2.c.c.y) : [14 x 14 x 32 x *] -> [14 x 14 x 32 x *]
Validating --> pool2 = MaxPooling (conv2.y) : [14 x 14 x 32 x *] -> [7 x 7 x 32 x *]

h1.t Times operation: For legacy compatibility, the sample layout of left input (h1.W LearnableParameter operation) was patched to [128 x 7 x 7 x 32] (from [128 x 1568])
Validating --> h1.t = Times (h1.W, pool2) : [128 x 7 x 7 x 32], [7 x 7 x 32 x *] -> [128 x *]
Validating --> h1.sc = LearnableParameter() :  -> [128 x 1]
Validating --> h1.b = LearnableParameter() :  -> [128 x 1]
Validating --> h1.m = LearnableParameter() :  -> [128 x 1]
Validating --> h1.isd = LearnableParameter() :  -> [128 x 1]
Validating --> h1.bn = BatchNormalization (h1.t, h1.sc, h1.b, h1.m, h1.isd) : [128 x *], [128 x 1], [128 x 1], [128 x 1], [128 x 1] -> [128 x *]
Validating --> h1.y = RectifiedLinear (h1.bn) : [128 x *] -> [128 x *]
Validating --> ol.t = Times (ol.W, h1.y) : [10 x 128], [128 x *] -> [10 x *]
Validating --> ol.b = LearnableParameter() :  -> [10 x 1]
Validating --> ol.z = Plus (ol.t, ol.b) : [10 x *], [10 x 1] -> [10 x 1 x *]
Validating --> ce = CrossEntropyWithSoftmax (labels, ol.z) : [10 x *], [10 x 1 x *] -> [1]
Validating --> err = ErrorPrediction (labels, ol.z) : [10 x *], [10 x 1 x *] -> [1]

Validating network. 16 nodes to process in pass 2.


Validating network, final pass.


Using cuDNN convolution engine for geometry: Input: 28 x 28 x 1, Output: 28 x 28 x 16, Kernel: 5 x 5 x 1, Map: 1 x 1 x 16, Stride: 1 x 1 x 1, Sharing: (1), AutoPad: (1), LowerPad: 0, UpperPad: 0.

Using CNTK batch normalization engine.

Using cuDNN convolution engine for geometry: Input: 28 x 28 x 16, Output: 14 x 14 x 16, Kernel: 2 x 2 x 1, Map: 1, Stride: 2 x 2 x 1, Sharing: (1), AutoPad: (0), LowerPad: 0, UpperPad: 0.

Using cuDNN convolution engine for geometry: Input: 14 x 14 x 16, Output: 14 x 14 x 32, Kernel: 5 x 5 x 16, Map: 1 x 1 x 32, Stride: 1 x 1 x 16, Sharing: (1), AutoPad: (1), LowerPad: 0, UpperPad: 0.

Using CNTK batch normalization engine.

Using cuDNN convolution engine for geometry: Input: 14 x 14 x 32, Output: 7 x 7 x 32, Kernel: 2 x 2 x 1, Map: 1, Stride: 2 x 2 x 1, Sharing: (1), AutoPad: (0), LowerPad: 0, UpperPad: 0.

Using CNTK batch normalization engine.


20 out of 36 nodes do not share the minibatch layout with the input data.

Post-processing network complete.

04/26/2016 16:25:18: Created model with 36 nodes on GPU 0.

04/26/2016 16:25:18: Training criterion node(s):
04/26/2016 16:25:18: 	ce = CrossEntropyWithSoftmax

04/26/2016 16:25:18: Evaluation criterion node(s):

04/26/2016 16:25:18: 	err = ErrorPrediction


Allocating matrices for forward and/or backward propagation.

Memory Sharing Structure:

0000000000000000: {[conv1.c.c.isd Gradient[16 x 1]] [conv1.c.c.m Gradient[16 x 1]] [conv2.c.c.isd Gradient[32 x 1]] [conv2.c.c.m Gradient[32 x 1]] [err Gradient[1]] [featScale Gradient[1 x 1]] [featScaled Gradient[28 x 28 x 1 x *]] [features Gradient[28 x 28 x 1 x *]] [h1.isd Gradient[128 x 1]] [h1.m Gradient[128 x 1]] [labels Gradient[10 x *]] }
00000073B3985900: {[features Value[28 x 28 x 1 x *]] }
00000073B3A0D100: {[conv1.c.c.isd Value[16 x 1]] }
00000073B3A0D2E0: {[conv1.c.c.sc Value[16 x 1]] }
00000073B3A0D420: {[featScale Value[1 x 1]] }
00000073B3A0DEC0: {[labels Value[10 x *]] }
00000073B3A0E000: {[conv2.c.W Value[32 x 400]] }
00000073B3A0E1E0: {[conv2.c.c.b Value[32 x 1]] }
00000073B3A0E320: {[conv2.c.c.sc Value[32 x 1]] }
00000073B3A0E780: {[conv1.c.c.m Value[16 x 1]] }
00000073B3A0EBE0: {[conv1.c.W Value[16 x 25]] }
00000073B3A0ED20: {[conv1.c.c.b Value[16 x 1]] }
00000073CBC45170: {[h1.W Value[128 x 7 x 7 x 32]] }
00000073CBC455D0: {[conv2.c.c.isd Value[32 x 1]] }
00000073CBC45850: {[h1.m Value[128 x 1]] }
00000073CBC458F0: {[h1.b Value[128 x 1]] }
00000073CBC45990: {[ol.b Value[10 x 1]] }
00000073CBC45A30: {[h1.sc Value[128 x 1]] }
00000073CBC45D50: {[ol.W Value[10 x 128]] }
00000073CBC46110: {[conv2.c.c.m Value[32 x 1]] }
00000073CBC46570: {[h1.isd Value[128 x 1]] }
00000073D24928E0: {[h1.sc Gradient[128 x 1]] [h1.y Gradient[128 x *]] [ol.z Gradient[10 x 1 x *]] }
00000073D2492980: {[ol.t Gradient[10 x *]] [pool1 Gradient[14 x 14 x 16 x *]] [pool2 Gradient[7 x 7 x 32 x *]] }
00000073D2492B60: {[conv2.c.W Gradient[32 x 400]] [h1.t Gradient[128 x *]] [h1.y Value[128 x *]] }
00000073D2492F20: {[ce Gradient[1]] }
00000073D2493060: {[ol.W Gradient[10 x 128]] [ol.z Value[10 x 1 x *]] }
00000073D24931A0: {[conv1.c.c.y Gradient[28 x 28 x 16 x *]] [pool1 Value[14 x 14 x 16 x *]] }
00000073D2493240: {[conv1.c.W Gradient[16 x 25]] [conv2.c.c.c Value[14 x 14 x 32 x *]] }
00000073D2493380: {[conv1.c.c.sc Gradient[16 x 1]] [conv1.y Gradient[28 x 28 x 16 x *]] }
00000073D2493420: {[err Value[1]] }
00000073D2493740: {[ol.b Gradient[10 x 1]] }
00000073D24939C0: {[h1.W Gradient[128 x 7 x 7 x 32]] }
00000073D2493B00: {[conv1.c.c.c Gradient[28 x 28 x 16 x *]] [conv1.y Value[28 x 28 x 16 x *]] }
00000073D2493D80: {[h1.bn Value[128 x *]] }
00000073D2493EC0: {[conv1.c.c.b Gradient[16 x 1]] [conv2.c.c.c Gradient[14 x 14 x 32 x *]] [conv2.y Value[14 x 14 x 32 x *]] }
00000073D2493F60: {[conv2.c.c.b Gradient[32 x 1]] }
00000073D24940A0: {[h1.b Gradient[128 x 1]] }
00000073D24945A0: {[conv2.c.c.y Value[14 x 14 x 32 x *]] }
00000073D24946E0: {[conv2.c.c.sc Gradient[32 x 1]] [conv2.y Gradient[14 x 14 x 32 x *]] [h1.t Value[128 x *]] }
00000073D2494960: {[featScaled Value[28 x 28 x 1 x *]] }
00000073D2494AA0: {[conv1.c.c.y Value[28 x 28 x 16 x *]] }
00000073D2494C80: {[conv1.c.c.c Value[28 x 28 x 16 x *]] }
00000073D2494D20: {[h1.bn Gradient[128 x *]] [ol.t Value[10 x *]] }
00000073D2494E60: {[conv2.c.c.y Gradient[14 x 14 x 32 x *]] [pool2 Value[7 x 7 x 32 x *]] }
00000073D2494F00: {[ce Value[1]] }

04/26/2016 16:25:18: No PreCompute nodes found, skipping PreCompute step.

04/26/2016 16:25:18: Starting Epoch 1: learning rate per sample = 0.015625  effective momentum = 0.900000  momentum as time constant = 303.7 samples

04/26/2016 16:25:18: Starting minibatch loop.
04/26/2016 16:25:25:  Epoch[ 1 of 3]-Minibatch[   1- 500, 26.67%]: SamplesSeen = 16000; TrainLossPerSample =  0.17396342; EvalErr[0]PerSample = 0.05400000; TotalTime = 6.4515s; SamplesPerSecond = 2480.0
04/26/2016 16:25:29:  Epoch[ 1 of 3]-Minibatch[ 501-1000, 53.33%]: SamplesSeen = 16000; TrainLossPerSample =  0.07770226; EvalErr[0]PerSample = 0.02300000; TotalTime = 4.4133s; SamplesPerSecond = 3625.4
04/26/2016 16:25:33:  Epoch[ 1 of 3]-Minibatch[1001-1500, 80.00%]: SamplesSeen = 16000; TrainLossPerSample =  0.06341840; EvalErr[0]PerSample = 0.02106250; TotalTime = 4.4152s; SamplesPerSecond = 3623.9
04/26/2016 16:25:37: Finished Epoch[ 1 of 3]: [Training Set] TrainLossPerSample = 0.096119279; TotalSamplesSeen = 60000; EvalErrPerSample = 0.029816667; AvgLearningRatePerSample = 0.015625; EpochTime=18.6028
04/26/2016 16:25:37: SGD: Saving checkpoint model 'E:\cygwin64\tmp\cntk-test-20160426172516.865730\CNTKTextFormatReader\Examples\Image\MNIST_03_ConvBatchNorm@release_gpu/Models/03_ConvBatchNorm.1'
Setting batch normalization blend time constant to 1.#INF.

04/26/2016 16:25:37: Starting Epoch 2: learning rate per sample = 0.003125  effective momentum = 0.900000  momentum as time constant = 303.7 samples

04/26/2016 16:25:37: Starting minibatch loop.
04/26/2016 16:25:41:  Epoch[ 2 of 3]-Minibatch[   1- 500, 26.67%]: SamplesSeen = 16000; TrainLossPerSample =  0.02458054; EvalErr[0]PerSample = 0.00737500; TotalTime = 4.3922s; SamplesPerSecond = 3642.8
04/26/2016 16:25:45:  Epoch[ 2 of 3]-Minibatch[ 501-1000, 53.33%]: SamplesSeen = 16000; TrainLossPerSample =  0.02110880; EvalErr[0]PerSample = 0.00718750; TotalTime = 4.3929s; SamplesPerSecond = 3642.3
04/26/2016 16:25:50:  Epoch[ 2 of 3]-Minibatch[1001-1500, 80.00%]: SamplesSeen = 16000; TrainLossPerSample =  0.01921926; EvalErr[0]PerSample = 0.00568750; TotalTime = 4.4064s; SamplesPerSecond = 3631.1
04/26/2016 16:25:53: Finished Epoch[ 2 of 3]: [Training Set] TrainLossPerSample = 0.020680674; TotalSamplesSeen = 120000; EvalErrPerSample = 0.0064166667; AvgLearningRatePerSample = 0.003125; EpochTime=16.51
04/26/2016 16:25:53: SGD: Saving checkpoint model 'E:\cygwin64\tmp\cntk-test-20160426172516.865730\CNTKTextFormatReader\Examples\Image\MNIST_03_ConvBatchNorm@release_gpu/Models/03_ConvBatchNorm.2'

04/26/2016 16:25:53: Starting Epoch 3: learning rate per sample = 0.003125  effective momentum = 0.900000  momentum as time constant = 303.7 samples

04/26/2016 16:25:53: Starting minibatch loop.
04/26/2016 16:25:58:  Epoch[ 3 of 3]-Minibatch[   1- 500, 26.67%]: SamplesSeen = 16000; TrainLossPerSample =  0.01576528; EvalErr[0]PerSample = 0.00462500; TotalTime = 4.4075s; SamplesPerSecond = 3630.2
04/26/2016 16:26:02:  Epoch[ 3 of 3]-Minibatch[ 501-1000, 53.33%]: SamplesSeen = 16000; TrainLossPerSample =  0.01360727; EvalErr[0]PerSample = 0.00375000; TotalTime = 4.3960s; SamplesPerSecond = 3639.7
04/26/2016 16:26:06:  Epoch[ 3 of 3]-Minibatch[1001-1500, 80.00%]: SamplesSeen = 16000; TrainLossPerSample =  0.01391740; EvalErr[0]PerSample = 0.00406250; TotalTime = 4.3872s; SamplesPerSecond = 3647.0
04/26/2016 16:26:10: Finished Epoch[ 3 of 3]: [Training Set] TrainLossPerSample = 0.014501246; TotalSamplesSeen = 180000; EvalErrPerSample = 0.0041333333; AvgLearningRatePerSample = 0.003125; EpochTime=16.4986
04/26/2016 16:26:10: SGD: Saving checkpoint model 'E:\cygwin64\tmp\cntk-test-20160426172516.865730\CNTKTextFormatReader\Examples\Image\MNIST_03_ConvBatchNorm@release_gpu/Models/03_ConvBatchNorm'
04/26/2016 16:26:10: CNTKCommandTrainEnd: train

04/26/2016 16:26:10: Action "train" complete.


04/26/2016 16:26:10: ##############################################################################
04/26/2016 16:26:10: #                                                                            #
04/26/2016 16:26:10: # Action "test"                                                              #
04/26/2016 16:26:10: #                                                                            #
04/26/2016 16:26:10: ##############################################################################


Post-processing network...

3 roots:
	ce = CrossEntropyWithSoftmax()
	err = ErrorPrediction()
	ol.z = Plus()

Validating network. 36 nodes to process in pass 1.

Validating --> labels = InputValue() :  -> [10 x *1]
Validating --> ol.W = LearnableParameter() :  -> [10 x 128]
Validating --> h1.W = LearnableParameter() :  -> [128 x 7 x 7 x 32]
Validating --> conv2.c.W = LearnableParameter() :  -> [32 x 400]
Validating --> conv1.c.W = LearnableParameter() :  -> [16 x 25]
Validating --> featScale = LearnableParameter() :  -> [1 x 1]
Validating --> features = InputValue() :  -> [28 x 28 x 1 x *1]
Validating --> featScaled = ElementTimes (featScale, features) : [1 x 1], [28 x 28 x 1 x *1] -> [28 x 28 x 1 x *1]
Validating --> conv1.c.c.c = Convolution (conv1.c.W, featScaled) : [16 x 25], [28 x 28 x 1 x *1] -> [28 x 28 x 16 x *1]
Validating --> conv1.c.c.sc = LearnableParameter() :  -> [16 x 1]
Validating --> conv1.c.c.b = LearnableParameter() :  -> [16 x 1]
Validating --> conv1.c.c.m = LearnableParameter() :  -> [16 x 1]
Validating --> conv1.c.c.isd = LearnableParameter() :  -> [16 x 1]
Validating --> conv1.c.c.y = BatchNormalization (conv1.c.c.c, conv1.c.c.sc, conv1.c.c.b, conv1.c.c.m, conv1.c.c.isd) : [28 x 28 x 16 x *1], [16 x 1], [16 x 1], [16 x 1], [16 x 1] -> [28 x 28 x 16 x *1]
Validating --> conv1.y = RectifiedLinear (conv1.c.c.y) : [28 x 28 x 16 x *1] -> [28 x 28 x 16 x *1]
Validating --> pool1 = MaxPooling (conv1.y) : [28 x 28 x 16 x *1] -> [14 x 14 x 16 x *1]
Validating --> conv2.c.c.c = Convolution (conv2.c.W, pool1) : [32 x 400], [14 x 14 x 16 x *1] -> [14 x 14 x 32 x *1]
Validating --> conv2.c.c.sc = LearnableParameter() :  -> [32 x 1]
Validating --> conv2.c.c.b = LearnableParameter() :  -> [32 x 1]
Validating --> conv2.c.c.m = LearnableParameter() :  -> [32 x 1]
Validating --> conv2.c.c.isd = LearnableParameter() :  -> [32 x 1]
Validating --> conv2.c.c.y = BatchNormalization (conv2.c.c.c, conv2.c.c.sc, conv2.c.c.b, conv2.c.c.m, conv2.c.c.isd) : [14 x 14 x 32 x *1], [32 x 1], [32 x 1], [32 x 1], [32 x 1] -> [14 x 14 x 32 x *1]
Validating --> conv2.y = RectifiedLinear (conv2.c.c.y) : [14 x 14 x 32 x *1] -> [14 x 14 x 32 x *1]
Validating --> pool2 = MaxPooling (conv2.y) : [14 x 14 x 32 x *1] -> [7 x 7 x 32 x *1]
Validating --> h1.t = Times (h1.W, pool2) : [128 x 7 x 7 x 32], [7 x 7 x 32 x *1] -> [128 x *1]
Validating --> h1.sc = LearnableParameter() :  -> [128 x 1]
Validating --> h1.b = LearnableParameter() :  -> [128 x 1]
Validating --> h1.m = LearnableParameter() :  -> [128 x 1]
Validating --> h1.isd = LearnableParameter() :  -> [128 x 1]
Validating --> h1.bn = BatchNormalization (h1.t, h1.sc, h1.b, h1.m, h1.isd) : [128 x *1], [128 x 1], [128 x 1], [128 x 1], [128 x 1] -> [128 x *1]
Validating --> h1.y = RectifiedLinear (h1.bn) : [128 x *1] -> [128 x *1]
Validating --> ol.t = Times (ol.W, h1.y) : [10 x 128], [128 x *1] -> [10 x *1]
Validating --> ol.b = LearnableParameter() :  -> [10 x 1]
Validating --> ol.z = Plus (ol.t, ol.b) : [10 x *1], [10 x 1] -> [10 x 1 x *1]
Validating --> ce = CrossEntropyWithSoftmax (labels, ol.z) : [10 x *1], [10 x 1 x *1] -> [1]
Validating --> err = ErrorPrediction (labels, ol.z) : [10 x *1], [10 x 1 x *1] -> [1]

Validating network. 16 nodes to process in pass 2.


Validating network, final pass.


Using cuDNN convolution engine for geometry: Input: 28 x 28 x 1, Output: 28 x 28 x 16, Kernel: 5 x 5 x 1, Map: 1 x 1 x 16, Stride: 1 x 1 x 1, Sharing: (1), AutoPad: (1), LowerPad: 0, UpperPad: 0.

Using CNTK batch normalization engine.

Using cuDNN convolution engine for geometry: Input: 28 x 28 x 16, Output: 14 x 14 x 16, Kernel: 2 x 2 x 1, Map: 1, Stride: 2 x 2 x 1, Sharing: (1), AutoPad: (0), LowerPad: 0, UpperPad: 0.

Using cuDNN convolution engine for geometry: Input: 14 x 14 x 16, Output: 14 x 14 x 32, Kernel: 5 x 5 x 16, Map: 1 x 1 x 32, Stride: 1 x 1 x 16, Sharing: (1), AutoPad: (1), LowerPad: 0, UpperPad: 0.

Using CNTK batch normalization engine.

Using cuDNN convolution engine for geometry: Input: 14 x 14 x 32, Output: 7 x 7 x 32, Kernel: 2 x 2 x 1, Map: 1, Stride: 2 x 2 x 1, Sharing: (1), AutoPad: (0), LowerPad: 0, UpperPad: 0.

Using CNTK batch normalization engine.


20 out of 36 nodes do not share the minibatch layout with the input data.

Post-processing network complete.

evalNodeNames are not specified, using all the default evalnodes and training criterion nodes.


Allocating matrices for forward and/or backward propagation.

Memory Sharing Structure:

0000000000000000: {[ce Gradient[1]] [conv1.c.W Gradient[16 x 25]] [conv1.c.c.b Gradient[16 x 1]] [conv1.c.c.c Gradient[28 x 28 x 16 x *1]] [conv1.c.c.isd Gradient[16 x 1]] [conv1.c.c.m Gradient[16 x 1]] [conv1.c.c.sc Gradient[16 x 1]] [conv1.c.c.y Gradient[28 x 28 x 16 x *1]] [conv1.y Gradient[28 x 28 x 16 x *1]] [conv2.c.W Gradient[32 x 400]] [conv2.c.c.b Gradient[32 x 1]] [conv2.c.c.c Gradient[14 x 14 x 32 x *1]] [conv2.c.c.isd Gradient[32 x 1]] [conv2.c.c.m Gradient[32 x 1]] [conv2.c.c.sc Gradient[32 x 1]] [conv2.c.c.y Gradient[14 x 14 x 32 x *1]] [conv2.y Gradient[14 x 14 x 32 x *1]] [err Gradient[1]] [featScale Gradient[1 x 1]] [featScaled Gradient[28 x 28 x 1 x *1]] [features Gradient[28 x 28 x 1 x *1]] [h1.W Gradient[128 x 7 x 7 x 32]] [h1.b Gradient[128 x 1]] [h1.bn Gradient[128 x *1]] [h1.isd Gradient[128 x 1]] [h1.m Gradient[128 x 1]] [h1.sc Gradient[128 x 1]] [h1.t Gradient[128 x *1]] [h1.y Gradient[128 x *1]] [labels Gradient[10 x *1]] [ol.W Gradient[10 x 128]] [ol.b Gradient[10 x 1]] [ol.t Gradient[10 x *1]] [ol.z Gradient[10 x 1 x *1]] [pool1 Gradient[14 x 14 x 16 x *1]] [pool2 Gradient[7 x 7 x 32 x *1]] }
00000073E9E73410: {[ol.b Value[10 x 1]] }
00000073E9E73730: {[h1.isd Value[128 x 1]] }
00000073E9E73AF0: {[conv1.c.W Value[16 x 25]] }
00000073E9E73B90: {[conv2.c.c.sc Value[32 x 1]] }
00000073E9E73EB0: {[featScaled Value[28 x 28 x 1 x *1]] }
00000073E9E74090: {[labels Value[10 x *1]] }
00000073E9E74130: {[conv1.c.c.c Value[28 x 28 x 16 x *1]] }
00000073E9E74310: {[conv1.c.c.sc Value[16 x 1]] }
00000073E9E744F0: {[conv1.c.c.b Value[16 x 1]] }
00000073E9E74590: {[ol.W Value[10 x 128]] }
00000073E9E746D0: {[h1.W Value[128 x 7 x 7 x 32]] }
00000073E9E74770: {[conv2.c.W Value[32 x 400]] }
00000073E9E74B30: {[features Value[28 x 28 x 1 x *1]] }
00000073E9E74BD0: {[h1.m Value[128 x 1]] }
00000073E9E74D10: {[conv1.c.c.m Value[16 x 1]] }
00000073E9E752B0: {[h1.sc Value[128 x 1]] }
00000073E9E75490: {[conv1.c.c.isd Value[16 x 1]] }
00000073E9E755D0: {[conv2.c.c.m Value[32 x 1]] }
00000073E9E757B0: {[conv2.c.c.isd Value[32 x 1]] }
00000073E9E758F0: {[h1.b Value[128 x 1]] }
00000073E9E75A30: {[featScale Value[1 x 1]] }
00000073E9E75B70: {[conv2.c.c.b Value[32 x 1]] }
00000073E9E75D50: {[conv2.c.c.c Value[14 x 14 x 32 x *1]] }
00000073E9E75DF0: {[conv2.c.c.y Value[14 x 14 x 32 x *1]] }
00000073E9E76070: {[pool2 Value[7 x 7 x 32 x *1]] }
00000073E9E761B0: {[ol.z Value[10 x 1 x *1]] }
00000073E9E76250: {[ce Value[1]] }
00000073E9E762F0: {[err Value[1]] }
00000073E9E76390: {[h1.bn Value[128 x *1]] }
00000073E9E764D0: {[conv1.y Value[28 x 28 x 16 x *1]] }
00000073E9E76610: {[ol.t Value[10 x *1]] }
00000073E9E767F0: {[conv1.c.c.y Value[28 x 28 x 16 x *1]] }
00000073E9E76A70: {[h1.y Value[128 x *1]] }
00000073E9E76E30: {[h1.t Value[128 x *1]] }
00000073E9E770B0: {[pool1 Value[14 x 14 x 16 x *1]] }
00000073E9E77290: {[conv2.y Value[14 x 14 x 32 x *1]] }

Final Results: Minibatch[1-313]: SamplesSeen = 10000    err: ErrorPrediction/Sample = 0.0073    ce: CrossEntropyWithSoftmax/Sample = 0.021586107    Perplexity = 1.0218208    

04/26/2016 16:26:20: Action "test" complete.

04/26/2016 16:26:20: __COMPLETED__